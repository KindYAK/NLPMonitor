import csv

from elasticsearch_dsl import Search

from nlpmonitor.settings import ES_CLIENT, ES_INDEX_DOCUMENT_EVAL, ES_INDEX_DOCUMENT

from sklearn.metrics import classification_report, roc_auc_score

tm_name = "bigartm_two_years_main_and_gos2"
criterion_id = 35

s = Search(using=ES_CLIENT, index=f"{ES_INDEX_DOCUMENT_EVAL}_{tm_name}_{criterion_id}")
s = s.source(('value', 'document_es_id'))

# Values
document_values = dict((h.document_es_id, h.value) for h in s.scan())

# Resonance thresholds
std = Search(using=ES_CLIENT, index=f"{ES_INDEX_DOCUMENT}") \
          .filter("range", num_views={"gt": 0})
std.aggs.bucket("sources", agg_type="terms", field="source", size=100) \
    .metric("stats", agg_type="extended_stats", field="num_views")
r = std.execute()

source_resonances = dict(
    (bucket.key, bucket.stats) for bucket in r.aggregations.sources.buckets
)
source_resonance_means = dict(((source, stats.avg) for source, stats in source_resonances.items()))
source_resonance_stds = dict(((source, stats.std_deviation) for source, stats in source_resonances.items()))
sigma_threshold = 1
source_resonance_thresholds = dict(((source, source_resonance_means[source] + sigma_threshold * source_resonance_stds[source]) for source in source_resonances.keys()))

ids = """13940554
13940592
35553072
1373443
13758263
1395326
42045360
325537
33357430
33494961
42113080
35951863
40989624
15746937
15747282
15743258
1482351
1408710
1427749
15672879
15186237
14325954
31870251
366663
42016543
41576794
41861148
40914866
43164118
43161376
43161779
11500724
43795633
43131485
43144887
43132324
46155540
43351323
43352957
1178809
43183827
379481
433074
43042595
43079704
43098743
380943
46378504
42876580
42933203
42783425
427842
46376939
43354435
43348343
42945008
42945027
42945667
46970985
5203617
43033533
421948
38333305
393619
393978
1168023
10808716
10808761
1213822
1080257
10804528
16980685
10786206
1083136
67084186
1415036
1415432
48075135
48076726
48078450
48078626
67056462
48087035
48087310
14243431
14273971
1107443
1111260
67072632
67069911
43131769
705898
14544170
43124885
43124972
43113472
43825167
43825562
65116127
43830017
43830231
43831623
67050641
71890736
1057622
1171979
1172014
1172804
64963527
64974888
79246094
79327157
11753578
1176958
1184584
1184918
1186702
781354
730152
730170
1180377
1180428
727056
1188908
1179037
1179061
1179484
41036589
41195327
43133935
43145995
4170893
549240
54938316
42032367
542571
42037457
58435832
61740952
61741150
3521947
58486086
58487851
42113014
58476407
356188
35660230
54274851
61667780
61667885
61642269
60682649
59968788
50454476
57054277
50468639
50567194
55089128
54673879
54684609
51461218
51463247
66400589
50162869
50169478
54285736
42092187
314888
31598850
53390372
53396825
314391
31527520
67040348
53677579
34744217
5077124
50772324
66313612
53107772
66311918
53108019
50784518
53114924
5077791
53117425
53117585
50781261
53118232
13720243
1372977
1387554
13940652
535353
1396579
534903
534522
770119
5061916
5062783
506454
5073244
5073527
5073609
5073893
5076431
5074617
5074736
5061067
5088032
5088385
5083740
5084300
427403
42876135
42924759
64683240
50791436
42106132
42103499
42934551
53691551
46993409
470140
470702
47104007
43345686
377318
383871
357660
365720
5070065
5070080
53191258
5068127
43360958
43362347
39920091
5069205
5075207
5075304
5073051
515888
51622274
516927
43131483
53168340
43131977
53692963
43185860
51507381
767720
52523379
770520
77082232
42966433
42969016
29771050
9893091
9896884
9902876
303487
30563412
30565862
30567335
30571393
30585041
9911944
74438727
9914976
9915120
9920732
9921231
9922696
9924363
9935010
53162764
5056357
70023789
50560479
54343579
20466015
20466582
54114190
540253
54125196
75222131
6112054
1408298
1411669
60690113
54136939
541505
14224767
1432499
58251666
21799968
54312850
1447833
21937001
21937035
21938123
543336
54335119
14558136
55794610
22634847
2330481
15172471
151729
8665770
539436
53949159
8671964
8672403
8673707
8673925
539147
539321
537794
8551913
8551949
8552084
8552900
8690976
8825782
351640
36581168
43163454
43166501
43166826
42089152
325667
15556677
157017
33357402
33488782
936281
28046718
28918746
29756021
9858567
9904477
30591045
52441195
31527502
42058214
15715704
15718660
15720570
42068848
15742626
15746669
15748144
15750423
15757589
47976230
50792140
32129096
5082744
50789642
203609
20511430
507944
2082353
325719
211241
212007
33524713
5068945
5069130
5069137
5075587
5074896
2168629
3251234
42096323
42097737
50881032
5088790
5089635
43363322
43371530
43373916
43379748
43494765
43602829
43611673
43612123
43616860
47378174
43632883
43653528
43654163
43656596
43696550
43794980
43796153
43797344
43797690
43799176
43808275
43810818
43813184
43814109
43814383
43815223
43815432
43815922
43818629
43819537
43199950
43206770
43214088
45583602
455926
43239940
45771814
3698745
37134398
371981
44200272
44200400
44200520
442995
44327496
44367003
43655140
43667668
44376675
43681428
43684114
43700382
43717364
43745983
43747551
444817
43794512
43795808
43796194
44536018
43798329
43798394
44666806
43806686
43807600
43808958
43809028
43809552
51514985
51517113
43813031
43813640
43814413
43814479
43815391
43817001
51520348
43818781
43819450
44190475
44257084
5162243
44367226
44376520
44376986
51463696
44377595
44379456
51467249
44500644
51473282
51473573
50166390
5100845
50426520
50454084
50468036
4992097
499219
5087028
5083033
5100499
5092992
43374870
43429852
43462149
43487367
43494285
43494653
43500527
435109
43601169
43603970
43605434
43610835
43617335
47425873
47453766
43635667
43639002
1183121
1183155
1183194
1190910
51449130
45308766
1186925
1187033
1174267
1174328
4396999
11002073
44149499
44183948
44184199
53144118
1226051
1226802
43213808
43216950
48968290
48985610
490077
45307817
432403
43241044
43357621
3697466
3697616
3698277
1703751
53134624
1709576
51449160
171722
17199944
172026
5055505
545656
545759
172818
173133
54633694
173363
54663565
711954
712037
712045
712119
712225
54937981
67079565
67081223
67083967
5543925
5551031
55926319
58818313
55971837
53869376
539466
55988034
53758024
59683995
44974845
44933997
45334571
45341868
45321303
544304
45326276
45326639
54340376
54342249
541933
6480717
64974855
54285656
67047283
61816658
61821081
55914270
11209462
59246205
11209685
59591689
56224378
74077940
10417858
10418574
63959800
61657443
10424477
61670687
10425339
58069011
64433592
53262507
11540168
58350279
54311862
10424643
10426841
10426884
67049927
68682661
10428138
68934687
68943290
1169435
7163737
694802
1061593
1063912
797316
797450
797486
1065581
11796423
72291043
60674670
1185954
1181224
1182351
1182526
10893632
1213808
1165650
1161212
1162115
1163212
1163477
1164104
12116713
66787431
67040292
1173291
1173627
1186527
54129267
1188266
54133732
54178358
75551895
45073408
761828
8692715
16981530
53978310
1778552
58613808
61645767
57551604
1808030
1809092
180956
1767331
185043
67913669
1805913
54111071
8531986
8532478
54117952
8537568
994906
9964588
8625450
180655
15783721
15801498
53186051
15807800
53186276
15809007
15810459
53195412
58482221
532414
53259090
58500792
16977026
17199303
7538761
74330548
54342811
54342837
54088465
55298635
54335237
1695727
185671
58588794
695065
54113858
61680939
61682494
75176269
45090103
54137877
54138103
541414
58343388
75637369
55385950
764525
76704368
44713949
53704270
66298150
798167
66313309
66313879
53368360
44832527
44832632
44866254
44869203
534737
44900673
536234
53645893
53687304
53697154
54289979
54290085
65036008
61963240
13499455
13506557
71271167
796855
13503198
13503324
51076145
510877
41314153
414866
5077292
5077127
42030668
5076298
5076600
5076699
5074069
5075842
5076081
51442755
50788993
5088946
5089979
5099992
5107833
5093375
5093539
5092502
50829132
5083090
5083779
5083859
5074431
5074487
5074624
5093272
5087542
5101433
51119407
48897574
489397
5097090
50142935
50143738
49142759
49078814
49079449
4986161
50048227
13501059
12751084
13498840
1241212
1226157
1226427
1226820
12526530
132612
13511834
1239643
1240075
1240231
1229158
1231334
1230659
1239912
1240144
1239063
1239459
12407642
12407650
1241374
1228244
1228358
12775191
50137186
13327514
13355427
12525630
4918226
1239634
12403937
4915991
12729376
4915942
13471760
13497662
12723876
12724466
4924805
12683733
12722923
12580740
12596900
12649683
4918307
491320
50160116
1239970
50140115
50140292
12552046
12573938
13497512
499169
4991958
12800006
13036722
12731042
12731421
133557
12809490
12782217
4981863
13497222
49138784
49080454
490817
1224085
1224485
1222042
1222195
1222785
1220955
1224247
50146568
1229154
1229460
1228236
42065641
42079672
42079933
42081619
1226154
45318681
1234810
1235632
1237135
1227562
1227599
12737672
12659405
50143866
50144082
12775120
10410738
134781
10411937
13498363
15763345
15771984
15772397
512626
1132942
1448040
10406525
45309683
45310480
44926816
44930227
45048377
45054689
45056339
45317398
45202007
1040497
5069135
12800201
5067729
11211323
1115356
1115587
1116554
1116563
1155797
11587643
1161564
4508176
44884252
44890253
45076114
45163580
45076080
45128235
45130878
10422498
12808882
11468791
12794939
12799939
11208394
44881315
44890732
44892041
45046013
44903399
44923998
45075080
48245333
13076094
132608
132902
133192
12733092
13504266
44187942
44200513
44182096
47984840
48017137
44856274
10405821
43684451
10385170
1039988
43149445
11210017
1134691
10409589
43656641
43640439
43822792
10455705
43824536
43809125
43809734
1063807
1179621
11796282
43118379
1185899
1186074
1186656
1186922
1186999
43814437
43797399
1163491
1163575
43678755
1165671
43654164
1176223
43819589
43820310
1175245
1175492
1168663
43815577
10140358
43820609
43820733
42955451
10332521
42958128
1116658
426466
42965515
42946554
42947073
42961163
1039793
10398671
11208383
1041632
1041686
52345497
10418335
10418553
50567641
51503845"""

ids = set([int(i.strip()) for i in ids.split() if i])

# Ground truth
# document_ground_truth = dict()
total = len(document_values.keys())
output = []
for i, document_es_id in enumerate(document_values.keys()):
    if i % 1000 == 0:
        print(i, total)
    try:
        d = Search(using=ES_CLIENT, index=ES_INDEX_DOCUMENT).filter("term", _id=document_es_id).source(('id', 'num_views', 'source')).execute()[0]
    except:
        continue
    if d.id not in ids:
        continue
    if getattr(d, 'num_views', False):
        print(d.id)
        output.append(
            {
                "id": d.id,
                "truth": 1 if d.num_views >= source_resonance_thresholds[d.source] else 0
            }
        )

keys = output[0].keys()
with open(f'/output_resonance_true.csv', 'w') as output_file:
    dict_writer = csv.DictWriter(output_file, keys)
    dict_writer.writeheader()
    dict_writer.writerows(output)


# Dataset to verify
# x_y = []
# for document_es_id in document_values:
#     if document_es_id not in document_ground_truth:
#         continue
#     # if 0.35 < document_values[document_es_id] < 0.65:
#     #     continue
#     x_y.append((document_values[document_es_id], document_ground_truth[document_es_id]))
#
# x, y = [], []
# for a, b in x_y:
#     x.append(bool(round(a)))
#     y.append(b)
#
# print(roc_auc_score(x, y))
#
# # Verification
# print(classification_report(x, y))
