import csv
from collections import defaultdict

from nlpmonitor.settings import ES_CLIENT, ES_INDEX_DOCUMENT, ES_INDEX_DOCUMENT_EVAL, ES_INDEX_TOPIC_DOCUMENT
from evaluation.models import EvalCriterion

from elasticsearch_dsl import Search

tm_name = "bigartm_hate"
corpus = ["hate_hate", "hate_offensive", "hate_neither", "hate_test"]
criterion_ids = [4, 5, 6]

criterion_dicts = defaultdict(dict)
criterion_names = dict()
for criterion_id in criterion_ids:
    criterion_names[criterion_id] = EvalCriterion.objects.get(id=criterion_id).name
    s = Search(using=ES_CLIENT, index=f"{ES_INDEX_DOCUMENT_EVAL}_{tm_name}_{criterion_id}")
    s = s.source(('value', 'document_es_id'))
    criterion_dicts[criterion_id] = dict(
        (doc.document_es_id, doc.value) for doc in s.scan()
    )

# Document_topic_dict
document_topic_dict = defaultdict(lambda: defaultdict(float))
s = Search(using=ES_CLIENT, index=f"{ES_INDEX_TOPIC_DOCUMENT}_{tm_name}").source(("topic_weight", "topic_id", "document_es_id"))
total = s.count()
for i, td in enumerate(s.scan()):
    if i % 10000 == 0:
        print(f"{i}/{total} processed")
    document_topic_dict[td.document_es_id][td.topic_id] = td.topic_weight

number_of_topics = 100

s = Search(using=ES_CLIENT, index=ES_INDEX_DOCUMENT)
s = s.filter("terms", corpus=corpus)
s = s.filter("exists", field="text_ngramized_en_lemminflect")
s = s.source(("text_ngramized_en_lemminflect", "class_label", "corpus"))

output = []
skipped = 0
for doc in s.scan():
    new_line = {
        "document_es_id": doc.meta.id,
        "ground_truth": doc.class_label,
        "text": doc.text_ngramized_en_lemminflect,
        "corpus": doc.corpus,
    }
    for criterion_id in criterion_ids:
        if doc.meta.id not in criterion_dicts[criterion_id]:
            skipped += 1
            new_line[criterion_names[criterion_id]] = 0
            continue
        new_line[criterion_names[criterion_id]] = criterion_dicts[criterion_id][doc.meta.id]
    for i in range(number_of_topics):
        new_line[f"topic_{i}"] = document_topic_dict[doc.meta.id][f"topic_{i}"]
    output.append(new_line)

print("Skipped", skipped)

output = list(filter(lambda x: not all([x[f"topic_{i}"] == 0 for i in range(100)]), output))

keys = output[0].keys()
with open(f'/output_hate_full.csv', 'w') as output_file:
    dict_writer = csv.DictWriter(output_file, keys)
    dict_writer.writeheader()
    dict_writer.writerows(output)

import xlwt
from mainapp.models import *

ids = """
49224412
48840994
48836956
48823271
48886713
48841187
49359409
49044663
49354999
49350810
49060686
48948503
48816624
48895549
48835548
49040404
48862077
48798486
48933704
49237699
49062577
49334753
49255992
48849562
49344147
48844620
49548046
48794020
48874360
48886621
48878853
48796943
48809129
48794990
48938498
49364665
48953039
49335433
48854767
49250840
48833142
48865858
48827265
48893098
48809384
48822091
49240817
48872937
48950557
49066944
48872038
48862551
48809752
48855824
49236130
48858359
49199130
48891614
48886511
48923716
48918607
49366876
49359867
48933830
48794868
48824387
48866770
48845720
49358670
48949610
49357990
48845784
48860791
48931944
48803618
48805693
48885845
49335926
48896308
48868925
48948849
49237004
49201870
48860337
48862912
49560200
48873747
49551693
49367736
48837182
48874143
49335398
48946945
48839361
49537285
49258140
48813723
48823921
48900922
48831608
48872247
48811298
48812832
49409740
48873625
48811386
49254036
49055961
48895950
49061784
48825117
48894769
48807479
48872856
49065807
48809554
48843187
49370326
48826999
49366798
49365889
49331538
49319060
48837385
49359372
48876218
49355489
48895916
49053434
49190143
49259632
48832533
49206241
48891761
48867714
48894243
48809815
49268380
49050575
48864901
48817896
48834010
48903498
49189496
48896720
49271786
49173507
49054448
48839939
48864003
49272226
48867854
49051192
48877908
48816665
49166265
48848968
48868031
48874749
48822908
49311144
48843441
48915432
48823741
48952134
48813990
48875167
48894593
48892577
48815537
48890075
49364711
49551037
48919714
48850841
49247582
48846110
48844382
48871717
48867532
48876685
48856112
48840224
48950293
49045633
48825532
48798305
49365625
49065560
49355168
49047950
49560253
48822545
48842928
48849350
49234478
48883444
48818773
48824653
49048879
49049890
48818708
49054018
48947584
48813770
48873162
48839278
48884353
48842294
49051901
49207033
49366909
48918744
49364011
49247928
49174086
48894955
49189733
48808115
48814872
49359284
49247429
48833550
48946683
49059889
49948673
48817387
48860463
48813754
49218719
48863959
48814590
49038475
48838170
49226530
49549346
49938453
49541805
49069973
48870046
48892287
49358608
49048047
49266108
48798348
48857817
49047302
48846094
48852792
49064203
49307330
48844326
48875032
48793578
48858711
48851543
48796869
48854202
49066810
49333779
48949258
48889784
49550421
48873000
48894619
49307010
49069039
48811247
48865134
49167189
48882118
48853052
49066396
48820690
48864722
48794939
48864932
49051113
48866341
48934172
48832010
48841081
48818898
48927417
48842768
48863157
48796555
49055144
49239461
49345013
48845141
49370228
48944884
48894277
48954935
48873254
49051342
48804531
48887039
49169950
48825291
48844711
49243699
49364374
48944368
48860429
48831681
48856390
48896089
49359885
49052581
48892312
48820039
49355468
49537549
49059148
48857023
49269045
48876486
49051115
48920865
48951998
49044576
48938531
49363884
49377771
48933076
49558583
49198503
48939942
48820650
49064325
48946594
48878382
48936666
48873313
48818219
48939468
48946556
48915661
48798870
48875770
48820318
48873457
49061120
48852829
48815734
48894053
48917772
49329959
49061863
49327976
49556273
48814438
49352496
48843006
49054268
48955004
48793581
48840858
48799702
49193819
48824032
48805690
48886277
48793988
49226434
49167736
48887126
48946272
49059343
48885984
48848853
48871083
49240655
49196206
48808346
48803266
48946281
48844222
48941923
48845599
48952371
49202009
49572533
49240004
48855796
49206184
48812327
49060524
49324089
49365897
48808628
48954662
48830694
49050382
48815398
48875023
49571235
49039613
48845398
49035194
48805010
48796371
49359277
48843673
49268701
48856275
49364192
49060449
48831624
49194237
48885645
48855931
48941066
49033262
48848604
49208731
49345769
48924550
49050297
48808925
48799432
48868060
48820082
48842972
49351393
49251926
49358888
49169032
49199900
49554503
49833564
49039535
48816935
48822273
48864947
48863883
48884108
48854665
48838018
48873485
48818011
48868778
49166435
48862320
48876253
48816847
49559029
48803259
49846689
48953791
48949523
49068464
48873677
48888797
48877498
48886826
48933016
48812353
49364996
48874096
49210636
49201520
49313421
49050315
49368055
48928841
49197473
48901654
49357593
49332062
49032699
48824051
49320501
48819683
49032183
49203341
48807141
48953134
48885240
49050897
49058968
48831207
49052450
48879227
49371159
48936569
48865248
49575435
48877372
49251025
49234806
48836907
48883584
48819010
48797657
49353129
48952791
48890749
48827541
49574779
48945259
48837206
48824237
48803981
49210227
48817926
48866117
49051869
49832828
49370111
48934801
48873922
49050906
48862107
48818997
48922393
48845096
49270223
48829102
49218128
48834323
48952513
48883081
48896200
48816297
49938462
48890316
49552410
49033511
49052064
48933617
48947600
49043959
49326960
49834627
48901286
49363964
49064753
48823720
49350682
49222083
49350050
48803084
48878289
48806552
48903856
48820517
49168476
48876388
48862534
48807124
48811764
49263074
49346599
49234467
48809919
49214162
48825949
48866978
48823044
49572589
49063260
48808175
48928109
48890509
48805622
49360387
49169961
48919297
48858505
49038437
48895134
48878036
49358255
48852786
48888625
48874324
48828488
48889808
48893525
48926037
48815257
48923039
49058159
49243519
48875302
49038593
48822304
49360789
48849923
49834166
48882321
48888452
48815386
48800219
48931284
49560006
48847861
49246278
49365928
49273822
49273057
48949517
48825261
48944160
49366509
48796128
49329989
48871795
49060914
48864626
49360712
48802353
48828773
48854696
48947501
48820474
49058071
48889315
48808415
49210871
49363815
49832961
48880725
48874525
49941339
48870394
49246919
48926031
48864727
48831719
49251067
49057801
49355790
49562073
49326485
48951324
48902832
48808863
49356013
48863339
48901881
48953045
49320523
49367172
48827133
48832486
48814489
48893821
48810403
49257436
48923886
48807588
48807582
48889198
48830062
48847283
48797263
49351415
48805132
48863419
48856994
48940079
48819984
48813739
48874603
48889550
49212007
48838990
49242773
49345953
48894081
48899602
48918038
49050340
48817200
48900778
49572526
48934725
49334978
48889084
48794605
49054839
49356235
48903165
48948271
49261445
49254061
48939041
48804263
49169055
48828672
49366742
48822139
48874537
49254123
49032845
48795196
49832201
49040943
49320607
48805134
49189564
48954298
49192973
48803188
48860730
48904796
49561951
48811801
49335435
49255400
48839403
48810452
48814469
49832064
49331097
49167623
48801345
49036135
48844567
48951438
49041704
49199561
49168835
49038600
48816284
48890932
49037584
48856455
48849890
48894604
48879760
48817872
48802866
49957362
48797070
49036978
48940413
48808801
49034770
49845825
48899601
48822806
48860815
49345912
48848920
49348294
48835549
48814017
48859131
48886059
49250691
48851764
49190192
49170015
48892940
49065770
48892812
49273618
49556837
49076612
48863161
48893805
48801776
49258231
48871520
48922602
49846757
49369921
49056367
49558878
48936454
48887326
49053962
48821614
49063452
48833582
49066783
48854512
48806604
49354151
49063669
49247379
48853541
49071180
48814629
48936150
48828567
49036287
48869350
48875230
49218067
48895488
48917775
49041896
48856498
48840876
48846353
49240039
48860166
49834003
48873660
48867505
49326491
49368893
49838404
49359630
48841064
48825553
48882711
49205338
49058275
48866819
49070653
48843133
48872171
49169951
49071776
49268061
49366168
49368696
49054266
48872107
48885517
49325852
48923928
48838242
48821146
48932949
48808737
49552700
48891424
49050993
48798335
48940279
49052169
48834862
48950774
48820665
49257682
48945039
49207376
48879554
49357656
48923747
48893495
49061531
48942552
48815701
49562386
48853951
48820645
48930576
49324245
48904699
48874995
48799142
48890641
49032770
49075710
48836364
49224499
49196219
48863202
48939883
49222643
49249827
49058508
49564750
49552741
48820988
49174078
48877952
49569937
48886648
48816925
48945612
48933538
49359246
49568260
48864549
48796154
48809615
48937438
48872281
48810249
49321696
48798059
48858617
48811154
48799187
49212939
48917774
48888364
48876355
48822321
49308090
49357022
49348793
49309891
48873110
48883331
48800230
48936469
48823176
49207029
49370258
48793364
48803549
48801276
49050892
49210978
48886823
48872839
48884477
48944907
48873416
49324215
48810794
48807304
49362609
48794494
49340702
48829646
48850180
48875035
48825820
49055234
48881349
49196412
48879937
48880701
49322832
48809604
48797030
48945804
48841478
48862871
48936738
48881435
49040992
49323707
48856824
49305199
48951292
48895075
48831982
49234794
49201660
49185800
49273332
48867433
48884547
48917421
48895448
49191183
49165925
48890678
48851376
49061797
49542008
49247638
48810133
48874310
48884155
49366962
49377807
48801801
49366008
48831833
48822787
49562067
49235815
48894437
49055933
49562449
48942037
49043573
48821287
48920172
48841077
48823802
49351261
49234746
49224332
48798326
48869968
48828316
48836663
49367569
49334020
49224675
49359882
48865337
48808122
48824110
49052044
"""

ids = [int(i) for i in ids.split() if i]

book = xlwt.Workbook()

sheet = book.add_sheet("text")

ok = 0
for i, id in enumerate(ids):
    try:
        d = Document.objects.get(id=id)
    except:
        print("(", id)
        continue
    sheet.row(i).write(0, id)
    sheet.row(i).write(1, d.text[:32750])
    ok += 1

book.save("/propa.xlsx")
